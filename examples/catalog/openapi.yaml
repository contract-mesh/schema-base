openapi: 3.0.1
info:
  title: eShopOnContainers - Catalog HTTP API
  description: The Catalog Microservice HTTP API. This is a Data-Driven/CRUD microservice
    sample
  version: v1
paths:
  "/v1/catalog/items":
    get:
      tags:
      - Catalog
      parameters:
      - name: pageSize
        in: query
        schema:
          type: integer
          format: int32
          default: 10
      - name: pageIndex
        in: query
        schema:
          type: integer
          format: int32
          default: 0
      - name: ids
        in: query
        schema:
          type: string
          nullable: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CatalogItem"
                nullable: true
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CatalogItem"
                nullable: true
            text/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CatalogItem"
                nullable: true
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
            application/json:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
            text/json:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
    put:
      tags:
      - Catalog
      requestBody:
        content:
          application/json-patch+json:
            schema:
              "$ref": "#/components/schemas/CatalogItem"
          application/json:
            schema:
              "$ref": "#/components/schemas/CatalogItem"
          text/json:
            schema:
              "$ref": "#/components/schemas/CatalogItem"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/CatalogItem"
      responses:
        '201':
          description: Success
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
            application/json:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
            text/json:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
    post:
      tags:
      - Catalog
      requestBody:
        content:
          application/json-patch+json:
            schema:
              "$ref": "#/components/schemas/CatalogItem"
          application/json:
            schema:
              "$ref": "#/components/schemas/CatalogItem"
          text/json:
            schema:
              "$ref": "#/components/schemas/CatalogItem"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/CatalogItem"
      responses:
        '201':
          description: Success
  "/v1/catalog/items/{id}":
    get:
      tags:
      - Catalog
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                "$ref": "#/components/schemas/CatalogItem"
            application/json:
              schema:
                "$ref": "#/components/schemas/CatalogItem"
            text/json:
              schema:
                "$ref": "#/components/schemas/CatalogItem"
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
            application/json:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
            text/json:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
            application/json:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
            text/json:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
  "/v1/catalog/items/withname/{name}":
    get:
      tags:
      - Catalog
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
          nullable: true
      - name: pageSize
        in: query
        schema:
          type: integer
          format: int32
          default: 10
      - name: pageIndex
        in: query
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                "$ref": "#/components/schemas/CatalogItemPaginatedItemsViewModel"
            application/json:
              schema:
                "$ref": "#/components/schemas/CatalogItemPaginatedItemsViewModel"
            text/json:
              schema:
                "$ref": "#/components/schemas/CatalogItemPaginatedItemsViewModel"
  "/v1/catalog/items/type/{catalogTypeId}/brand/{catalogBrandId}":
    get:
      tags:
      - Catalog
      parameters:
      - name: catalogTypeId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: catalogBrandId
        in: path
        required: true
        schema:
          type: integer
          format: int32
          nullable: true
      - name: pageSize
        in: query
        schema:
          type: integer
          format: int32
          default: 10
      - name: pageIndex
        in: query
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                "$ref": "#/components/schemas/CatalogItemPaginatedItemsViewModel"
            application/json:
              schema:
                "$ref": "#/components/schemas/CatalogItemPaginatedItemsViewModel"
            text/json:
              schema:
                "$ref": "#/components/schemas/CatalogItemPaginatedItemsViewModel"
  "/v1/catalog/items/type/all/brand/{catalogBrandId}":
    get:
      tags:
      - Catalog
      parameters:
      - name: catalogBrandId
        in: path
        required: true
        schema:
          type: integer
          format: int32
          nullable: true
      - name: pageSize
        in: query
        schema:
          type: integer
          format: int32
          default: 10
      - name: pageIndex
        in: query
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                "$ref": "#/components/schemas/CatalogItemPaginatedItemsViewModel"
            application/json:
              schema:
                "$ref": "#/components/schemas/CatalogItemPaginatedItemsViewModel"
            text/json:
              schema:
                "$ref": "#/components/schemas/CatalogItemPaginatedItemsViewModel"
  "/v1/catalog/types":
    get:
      tags:
      - Catalog
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CatalogType"
                nullable: true
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CatalogType"
                nullable: true
            text/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CatalogType"
                nullable: true
  "/v1/catalog/brands":
    get:
      tags:
      - Catalog
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CatalogBrand"
                nullable: true
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CatalogBrand"
                nullable: true
            text/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CatalogBrand"
                nullable: true
  "/v1/catalog/{id}":
    delete:
      tags:
      - Catalog
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '204':
          description: Success
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
            application/json:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
            text/json:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
  "/v1/catalog/items/{catalogItemId}/pic":
    get:
      tags:
      - Pic
      parameters:
      - name: catalogItemId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
            application/json:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
            text/json:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
            application/json:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
            text/json:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
components:
  schemas:
    CatalogType:
      type: object
      properties:
        id:
          type: integer
          format: int32
        type:
          type: string
          nullable: true
      nullable: true
    CatalogBrand:
      type: object
      properties:
        id:
          type: integer
          format: int32
        brand:
          type: string
          nullable: true
      nullable: true
    CatalogItem:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        price:
          type: number
          format: double
        pictureFileName:
          type: string
          nullable: true
        pictureUri:
          type: string
          nullable: true
        catalogTypeId:
          type: integer
          format: int32
        catalogType:
          "$ref": "#/components/schemas/CatalogType"
        catalogBrandId:
          type: integer
          format: int32
        catalogBrand:
          "$ref": "#/components/schemas/CatalogBrand"
        availableStock:
          type: integer
          format: int32
        restockThreshold:
          type: integer
          format: int32
        maxStockThreshold:
          type: integer
          format: int32
        onReorder:
          type: boolean
      nullable: true
    Object:
      type: object
      nullable: true
    CatalogItemPaginatedItemsViewModel:
      type: object
      properties:
        pageIndex:
          type: integer
          format: int32
          readOnly: true
        pageSize:
          type: integer
          format: int32
          readOnly: true
        count:
          type: integer
          format: int64
          readOnly: true
        data:
          type: array
          items:
            "$ref": "#/components/schemas/CatalogItem"
          nullable: true
          readOnly: true
      nullable: true