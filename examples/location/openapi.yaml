openapi: 3.0.1
info:
  title: eShopOnContainers - Location HTTP API
  description: The Location Microservice HTTP API. This is a Data-Driven/CRUD microservice
    sample
  version: v1
paths:
  "/v1/locations/user/{userId}":
    get:
      tags:
      - Locations
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                "$ref": "#/components/schemas/UserLocation"
            application/json:
              schema:
                "$ref": "#/components/schemas/UserLocation"
            text/json:
              schema:
                "$ref": "#/components/schemas/UserLocation"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - oauth2:
          - locationsapi
  "/v1/locations":
    get:
      tags:
      - Locations
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Locations"
                nullable: true
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Locations"
                nullable: true
            text/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Locations"
                nullable: true
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - oauth2:
          - locationsapi
    post:
      tags:
      - Locations
      requestBody:
        content:
          application/json-patch+json:
            schema:
              "$ref": "#/components/schemas/LocationRequest"
          application/json:
            schema:
              "$ref": "#/components/schemas/LocationRequest"
          text/json:
            schema:
              "$ref": "#/components/schemas/LocationRequest"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/LocationRequest"
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
            application/json:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
            text/json:
              schema:
                "$ref": "../standard/rest-types.yaml#/definitions/error"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - oauth2:
          - locationsapi
  "/v1/locations/{locationId}":
    get:
      tags:
      - Locations
      parameters:
      - name: locationId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                "$ref": "#/components/schemas/Locations"
            application/json:
              schema:
                "$ref": "#/components/schemas/Locations"
            text/json:
              schema:
                "$ref": "#/components/schemas/Locations"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - oauth2:
          - locationsapi
components:
  schemas:
    UserLocation:
      type: object
      properties:
        id:
          type: string
          nullable: true
        userId:
          type: string
          nullable: true
        locationId:
          type: integer
          format: int32
        updateDate:
          type: string
          format: date-time
      nullable: true
    LocationPoint:
      type: object
      properties:
        type:
          type: string
          nullable: true
          readOnly: true
        coordinates:
          type: array
          items:
            type: number
            format: double
          nullable: true
          readOnly: true
      nullable: true
    LocationPolygon:
      type: object
      properties:
        type:
          type: string
          nullable: true
          readOnly: true
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                type: number
                format: double
              nullable: true
            nullable: true
          nullable: true
          readOnly: true
      nullable: true
    Locations:
      type: object
      properties:
        id:
          type: string
          nullable: true
        locationId:
          type: integer
          format: int32
        code:
          type: string
          nullable: true
        parent_Id:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        location:
          "$ref": "#/components/schemas/LocationPoint"
        polygon:
          "$ref": "#/components/schemas/LocationPolygon"
      nullable: true
    LocationRequest:
      type: object
      properties:
        longitude:
          type: number
          format: double
        latitude:
          type: number
          format: double
      nullable: true
    Object:
      type: object
      nullable: true
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost:5105/connect/authorize
          tokenUrl: http://localhost:5105/connect/token
          scopes:
            locations: Locations API
